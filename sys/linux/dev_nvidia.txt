resource fd_nvidiactl[fd]
resource fd_nvidia0[fd]

resource cid[int32]
resource caf[int32]
resource NvHandle[int32]: 0xbeef0000, 0xbeef0001, 0xbeef0002, 0xbeef0003, 0xbeef0004, 0xbeef0005, 0xbeef0006, 0xbeef0007, 0xbeef0008, 0xbeef0009, 0xbeef0010, 0xcaf00000, 0xcaf00001, 0xcaf00002, 0xcaf00003, 0xcaf00004, 0xcaf00005, 0xcaf00006, 0xcaf00007, 0xcaf00008, 0xcaf00009, 0xcaf00010

openat$nvidiactl(fd const[AT_FDCWD], file ptr[in, string["/dev/nvidiactl"]], flags flags[open_flags], mode const[0]) fd_nvidiactl
syz_open_dev$nvidia(dev ptr[in, string["/dev/nvidia#"]], id intptr, flags flags[open_flags]) fd_nvidia0

mmap$nvidiactl(addr const[0], len len[addr], prot flags[mmap_prot], flags flags[mmap_flags], fd fd_nvidiactl, offset const[0])
mmap$nvidia0(addr const[0], len len[addr], prot flags[mmap_prot], flags flags[mmap_flags], fd fd_nvidia0, offset const[0])

# known ioctls with definitions from kernel interface

# ioctls initially used before rm_init_adapter

# nvidiactl

ioctl$NV_ESC_CHECK_VERSION_STR(fd fd_nvidiactl, cmd const[0xc04846d2], arg ptr[inout, nv_ioctl_rm_api_version_t])
ioctl$NV_ESC_SYS_PARAMS(fd fd_nvidiactl, cmd const[0xc00846d6], arg ptr[in, nv_ioctl_sys_params_t])
ioctl$NV_ESC_ENV_INFO(fd fd_nvidiactl, cmd const[0xc00446ca], arg ptr[out, nv_ioctl_env_info_t])
ioctl$NV_ESC_CARD_INFO(fd fd_nvidiactl, cmd const[0xca0046c8], arg ptr[out, nv_ioctl_card_info_t])

# nvidia0

ioctl$NV_ESC_NUMA_INFO(fd fd_nvidia0, cmd const[0xc22846d7], arg ptr[out, nv_ioctl_numa_info_t])

# more ioctls from kernel interface not observed being used

# nvidiactl

ioctl$NV_ESC_STATUS_CODE(fd fd_nvidiactl, cmd const[0xc00a46d1], arg ptr[inout, nv_ioctl_status_code_t])
ioctl$NV_ESC_IOCTL_XFER_CMD(fd fd_nvidiactl, cmd const[0xc01446d3], arg ptr[inout, nv_ioctl_xfer_t])
ioctl$NV_ESC_ATTACH_GPUS_TO_FD(fd fd_nvidiactl, cmd const[0xc02846d4], arg ptr[inout, nv_attach_gpus_to_fd_t])

# nvidia0

ioctl$NV_ESC_ALLOC_OS_EVENT(fd fd_nvidia0, cmd const[0xc01446ce], arg ptr[inout, nv_ioctl_alloc_os_event_t])
ioctl$NV_ESC_FREE_OS_EVENT(fd fd_nvidia0, cmd const[0xc01046cf], arg ptr[inout, nv_ioctl_free_os_event_t])
ioctl$NV_ESC_QUERY_DEVICE_INTR(fd fd_nvidia0, cmd const[0xc00846d5], arg ptr[out, nv_ioctl_query_device_intr_t])
ioctl$NV_ESC_SET_NUMA_STATUS(fd fd_nvidia0, cmd const[0xc00446d8], arg ptr[in, nv_ioctl_set_numa_status_t])

# unknown ioctls, not defined in kernel interface, descriptions derived from valgrind-mmt

# nvidiactl

# 0x2a
ioctl$NVRM_IOCTL_CALL(fd fd_nvidiactl, cmd const[0xc020462a], arg ptr[inout, nvrm_ioctl_call_t])
# 0x29
ioctl$NVRM_IOCTL_DESTROY(fd fd_nvidiactl, cmd const[0xc0104629], arg ptr[inout, nvrm_ioctl_destroy_t])
# 0x54
ioctl$NVRM_IOCTL_CREATE_DMA56(fd fd_nvidiactl, cmd const[0xc0384654], arg ptr[inout, nvrm_ioctl_create_dma56_t])
# 0x4a
ioctl$NVRM_IOCTL_MEMORY3(fd fd_nvidiactl, cmd const[0xc0c0464a], arg ptr[inout, nvrm_ioctl_memory3_t])
# 0x57
ioctl$NVRM_IOCTL_VSPACE_MAP(fd fd_nvidiactl, cmd const[0xc0384657], arg ptr[inout, nvrm_ioctl_vspace_map_t])
# 0x34
ioctl$NVRM_IOCTL_CREATE_UNK34(fd fd_nvidiactl, cmd const[0xc01c4634], arg ptr[inout, nvrm_ioctl_create_unk34_t])
# 0x4e
ioctl$NVRM_IOCTL_HOST_MAP56(fd fd_nvidiactl, cmd const[0xc038464e], arg ptr[inout, nvrm_ioctl_host_map56])
# 0x5e
ioctl$NVRM_IOCTL_UNK5E(fd fd_nvidiactl, cmd const[0xc028465e], arg ptr[inout, nvrm_ioctl_unk5e_t])
# 0x58
ioctl$NVRM_IOCTL_VSPACE_UNMAP(fd fd_nvidiactl, cmd const[0xc0284658], arg ptr[inout, nvrm_ioctl_vspace_unmap_t])
# 0x4f
ioctl$NVRM_IOCTL_HOST_UNMAP(fd fd_nvidiactl, cmd const[0xc020464f], arg ptr[inout, nvrm_ioctl_host_unmap_t])
# 0x41
ioctl$NVRM_IOCTL_SCHED_FIFO(fd fd_nvidiactl, cmd const[0xc0384641], arg ptr[inout, nvrm_ioctl_sched_fifo_t])

# nvidia0

# 0x27
ioctl$NVRM_IOCTL_CREATE_VSPACE56(fd fd_nvidia0, cmd const[0xc0384627], arg ptr[inout, nvrm_ioctl_create_vspace56_t])

# nvidiactl / nvidia0

# 0x2b
ioctl$NVRM_IOCTL_CREATE(fd fd_nvidiactl, cmd const[0xc020462b], arg ptr[inout, nvrm_ioctl_create_t])
ioctl$NVRM_IOCTL_CREATE_2(fd fd_nvidia0, cmd const[0xc020462b], arg ptr[inout, nvrm_ioctl_create_t])
ioctl$NVRM_IOCTL_CREATE_CONTEXT(fd fd_nvidiactl, cmd const[0xc020462b], arg ptr[inout, nvrm_ioctl_create_context])

# more ioctls from nvrm_ioctl.h

# nvidia0 / nvidiactl

ioctl$NVRM_IOCTL_CREATE_CTX(fd fd_nvidiactl, cmd const[0xc00c4622], arg ptr[inout, nvrm_ioctl_create_ctx_t])
ioctl$NVRM_IOCTL_CREATE_DEV_OBJ(fd fd_nvidiactl, cmd const[0xc0204623], arg ptr[inout, nvrm_ioctl_create_dev_obj])
ioctl$NVRM_IOCTL_CREATE_SIMPLE(fd fd_nvidiactl, cmd const[0xc0144628], arg ptr[inout, nvrm_ioctl_create_simple])
ioctl$NVRM_IOCTL_CREATE_DRV_OBJ(fd fd_nvidiactl, cmd const[0xc014462d], arg ptr[inout, nvrm_ioctl_create_drv_obj])
ioctl$NVRM_IOCTL_GET_PARAM(fd fd_nvidiactl, cmd const[0xc0144632], arg ptr[inout, nvrm_ioctl_get_param])
ioctl$NVRM_IOCTL_QUERY(fd fd_nvidiactl, cmd const[0xc0204637], arg ptr[inout, nvrm_ioctl_query])
ioctl$NVRM_IOCTL_UNK38(fd fd_nvidiactl, cmd const[0xc0204638], arg ptr[inout, nvrm_ioctl_unk38_t])
ioctl$NVRM_IOCTL_DISP_UNK48(fd fd_nvidiactl, cmd const[0xc0104648], arg ptr[inout, nvrm_ioctl_disp_unk48])
ioctl$NVRM_IOCTL_CONFIG(fd fd_nvidiactl, cmd const[0xc048464d], arg ptr[inout, nvrm_ioctl_config])
ioctl$NVRM_IOCTL_UNK52(fd fd_nvidiactl, cmd const[0xc0104652], arg ptr[inout, nvrm_ioctl_unk52])
ioctl$NVRM_IOCTL_BIND(fd fd_nvidiactl, cmd const[0xc0104659], arg ptr[inout, nvrm_ioctl_bind])

# structures

# structures from kernel interface

nv_ioctl_rm_api_version_t {
	cmd		int32
	reply		int32
	versionString	array[int8, NV_RM_API_VERSION_STRING_LENGTH]
}

nv_ioctl_sys_params_t {
	memblock_size	int64
}

nv_ioctl_env_info_t {
	pat_supported	int32
}

nv_ioctl_card_info_t {
	flags		int16
	pci_info	nv_pci_info_t
	gpu_id		int32
	interrupt_line	int16
	reg_address	int64
	reg_size	int64
	fb_address	int64
	fb_size		int64
	minor_number	int32
	dev_name	array[int8, 10]
}

nv_pci_info_t {
	domain		int32
	bus		int8
	slot		int8
	function	int8
	vendor_id	int16
	device_id	int16
	valid		bool32
}

nv_ioctl_numa_info_t {
	nid			int32
	status			int32
	memblock_size		int64
	numa_mem_addr		int64
	numa_mem_size		int64
	blacklist_addresses	nv_blacklist_addresses_t
}

nv_blacklist_addresses_t {
	addresses	array[int64, NV_IOCTL_NUMA_INFO_MAX_BLACKLIST_ADDRESSES]
	numEntries	len[addresses, int32]
}

# more ioctls

nv_ioctl_alloc_os_event_t {
	hClient		cid
	hDevice		NvHandle
	hOsEvent	NvHandle
	fd		fd_nvidiactl
	Status		int32
}

NvHandle {
	val	flags[handle, int32]
}

nv_ioctl_free_os_event_t {
	hClient	cid
	hDevice	NvHandle
	fd	fd_nvidiactl
	Status	int32
}

nv_ioctl_status_code_t {
	domain	int32
	bus	int8
	slot	int8
	status	int32
}

nv_ioctl_xfer_t {
	cmd	int32
	size	bytesize[ptr, int32]
	ptr	buffer[inout]
}

nv_attach_gpus_to_fd_t {
	gpus	array[int32]
}

nv_ioctl_query_device_intr_t {
	intrStatus	int32
	status		int32
}

nv_ioctl_set_numa_status_t {
	status	int32
}

# structs taken from envytools demmt nvrm_ioctl.h

nvrm_ioctl_destroy_t {
	cid	cid
	par	NvHandle
	handle	NvHandle
	status	int32
}

nvrm_ioctl_create_dma56_t {
	cid	cid
	_pad1	int32
	handle	NvHandle
	cls	int32
	flags	int32
	_pad2	int32
	par	NvHandle
	_pad3	int32
	base	int64
	limit	int64
	status	int32
	unk34	int32
}

nvrm_ioctl_memory3_t {
	cid		cid
	par		NvHandle
	cls		int32
	unk0c		int32
	status		int32
	unk14		int32
	vram_total	int64
	vram_free	int64
	vspace		int32
	handle		NvHandle
	unk30		array[int32, 36]
}

nvrm_ioctl_vspace_map_t {
	cid	cid
	dev	NvHandle
	vspace	int32
	handle	NvHandle
	base	int64
	size	int64
	flags	int32
	_pad1	int32
	addr	int64
	status	int32
	_pad2	int32
}

nvrm_ioctl_host_map56 {
	cid		cid
	subdev		NvHandle
	handle		NvHandle
	_pad1		int32
	foffset		int64
	length		int64
	map_id		int64
	status		int32
	_pad2		int32
# TODO fd_nvidia0 used?
	target_fd	fd_nvidiactl
	_pad3		int32
}

nvrm_ioctl_create_unk34_t {
	cid	cid
	par	NvHandle
	handle	NvHandle
	cid2	int32
	handle2	NvHandle
	unk14	int32
	status	int32
}

nvrm_ioctl_unk5e_t {
	cid	cid
	subdev	NvHandle
	handle	NvHandle
	_pad1	int32
	foffset	int64
# TODO "to just-mmapped thing"
	ptr	int64
	status	int32
	_pad2	int32
}

nvrm_ioctl_vspace_unmap_t {
	cid	cid
	dev	NvHandle
	vspace	int32
	handle	NvHandle
	unk10	int64
	addr	int64
	status	int32
	_pad	int32
}

nvrm_ioctl_host_unmap_t {
	cid	cid
	subdev	NvHandle
	handle	NvHandle
	_pad1	int32
	foffset	int64
	status	int32
	_pad2	int32
}

nvrm_ioctl_sched_fifo_t {
	cid	cid
	dev	NvHandle
	handle	NvHandle
	cnt	int32
	ptr1	buffer[inout]
	ptr2	buffer[inout]
	ptr3	buffer[inout]
	unk28	int32
	unk2c	int32
	status	int32
	_pad	int32
}

nvrm_ioctl_create_vspace56_t {
	cid		cid
	par		NvHandle
	handle		NvHandle
	cls		int32
	flags		int32
	_pad1		int32
	map_id		int64
	limit		int64
	status		int32
	_pad2		int32
# TODO fd_nvidia0 used?
	target_fd	fd_nvidiactl
	_pad3		int32
}

nvrm_ioctl_create_t {
	cid	cid
	par	NvHandle
	handle	NvHandle
	cls	int32
	ptr	ptr64[in, int32]
	status	int32
	_pad	int32
}

nvrm_ioctl_create_context {
	cid	const[0, int32]
	par	const[0, int32]
	handle	cid[opt]
	cls	const[0, int32]
	ptr	ptr64[in, int32]
	status	int32
	_pad	int32
}

# more structs of unseed ioctls from nvrm_ioctl.h

nvrm_ioctl_create_ctx_t {
	handle	NvHandle
	unk04	int32
	unk08	int32
}

nvrm_ioctl_create_dev_obj {
	cid	cid
	handle	NvHandle
	unk08	int32
	unk0c	int32
# ptr to what? int32?
	ptr	int32
	unk14	int32
	unk18	int32
	unk1c	int32
}

nvrm_ioctl_create_simple {
	cid	cid
	par	NvHandle
	handle	NvHandle
	cls	int32
	status	int32
}

nvrm_ioctl_create_drv_obj {
	cid	cid
	par	NvHandle
	handle	NvHandle
	cls	int32
	status	int32
}

nvrm_ioctl_get_param {
	cid	cid
	handle	NvHandle
	key	int32
	value	int32
	status	int32
}

nvrm_ioctl_query {
	cid	cid
	handle	NvHandle
	query	int32
	size	bytesize[ptr, int32]
	ptr	buffer[inout]
	status	int32
	_pad	int32
}

nvrm_ioctl_unk38_t {
	cid	cid
	handle	NvHandle
	unk08	int32
	size	bytesize[ptr, int32]
# TODO pointer to what struct
	ptr	buffer[inout]
	status	int32
	_pad	int32
}

nvrm_ioctl_disp_unk48 {
	cid	cid
	handle	NvHandle
	unk08	int32
	_pad	int32
}

nvrm_ioctl_config {
	cid	cid
	handle	NvHandle
	unk08	int64
	unk10	int64
	slen	bytesize[sptr, int64]
	sptr	buffer[inout]
	unk28	int64
	unk30	int64
	unk38	int64
	status	int32
	_pad	int32
}

nvrm_ioctl_unk52 {
	ptr	buffer[inout]
	unk08	int32
	status	int32
}

nvrm_ioctl_bind {
	cid	cid
	target	int32
	handle	NvHandle
	status	int32
}
