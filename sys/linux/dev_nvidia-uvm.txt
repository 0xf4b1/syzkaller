resource fd_nvidia_uvm[fd]
openat$nvidia_uvm(fd const[AT_FDCWD], file ptr[in, string["/dev/nvidia-uvm"]], flags flags[open_flags], mode const[0]) fd_nvidia_uvm
close$nvidia_uvm(fd fd_nvidia_uvm)
mmap$nvidia_uvm(addr vma, len len[addr], prot flags[mmap_prot], flags flags[mmap_flags], fd fd_nvidia_uvm, offset const[0])

resource fd_nvidia_uvm_tools[fd]
openat$nvidia_uvm_tools(fd const[AT_FDCWD], file ptr[in, string["/dev/nvidia-uvm-tools"]], flags flags[open_flags], mode const[0]) fd_nvidia_uvm_tools
close$nvidia_uvm_tools(fd fd_nvidia_uvm_tools)
mmap$nvidia_uvm_tools(addr vma, len len[addr], prot flags[mmap_prot], flags flags[mmap_flags], fd fd_nvidia_uvm_tools, offset const[0])

ioctl$UVM_INITIALIZE(fd fd_nvidia_uvm, cmd const[UVM_INITIALIZE], arg ptr[inout, UVM_INITIALIZE_PARAMS])
ioctl$UVM_DEINITIALIZE(fd fd_nvidia_uvm, cmd const[UVM_DEINITIALIZE], arg ptr[in, void])

ioctl$UVM_INITIALIZE_TOOLS(fd fd_nvidia_uvm_tools, cmd const[UVM_INITIALIZE], arg ptr[inout, UVM_INITIALIZE_PARAMS])
ioctl$UVM_DEINITIALIZE_TOOLS(fd fd_nvidia_uvm_tools, cmd const[UVM_DEINITIALIZE], arg ptr[in, void])

ioctl$UVM_RESERVE_VA(fd fd_nvidia_uvm, cmd const[UVM_RESERVE_VA], arg ptr[inout, UVM_RESERVE_VA_PARAMS])
ioctl$UVM_RELEASE_VA(fd fd_nvidia_uvm, cmd const[UVM_RELEASE_VA], arg ptr[inout, UVM_RELEASE_VA_PARAMS])
ioctl$UVM_REGION_COMMIT(fd fd_nvidia_uvm, cmd const[UVM_REGION_COMMIT], arg ptr[inout, UVM_REGION_COMMIT_PARAMS])
ioctl$UVM_REGION_DECOMMIT(fd fd_nvidia_uvm, cmd const[UVM_REGION_DECOMMIT], arg ptr[inout, UVM_REGION_DECOMMIT_PARAMS])
ioctl$UVM_REGION_SET_STREAM(fd fd_nvidia_uvm, cmd const[UVM_REGION_SET_STREAM], arg ptr[inout, UVM_REGION_SET_STREAM_PARAMS])
ioctl$UVM_SET_STREAM_RUNNING(fd fd_nvidia_uvm, cmd const[UVM_SET_STREAM_RUNNING], arg ptr[inout, UVM_SET_STREAM_RUNNING_PARAMS])
ioctl$UVM_SET_STREAM_STOPPED(fd fd_nvidia_uvm, cmd const[UVM_SET_STREAM_STOPPED], arg ptr[inout, UVM_SET_STREAM_STOPPED_PARAMS])
ioctl$UVM_RUN_TEST(fd fd_nvidia_uvm, cmd const[UVM_RUN_TEST], arg ptr[inout, UVM_RUN_TEST_PARAMS])
ioctl$UVM_ADD_SESSION(fd fd_nvidia_uvm, cmd const[UVM_ADD_SESSION], arg ptr[inout, UVM_ADD_SESSION_PARAMS])
ioctl$UVM_REMOVE_SESSION(fd fd_nvidia_uvm, cmd const[UVM_REMOVE_SESSION], arg ptr[inout, UVM_REMOVE_SESSION_PARAMS])
ioctl$UVM_ENABLE_COUNTERS(fd fd_nvidia_uvm, cmd const[UVM_ENABLE_COUNTERS], arg ptr[inout, UVM_ENABLE_COUNTERS_PARAMS])
ioctl$UVM_MAP_COUNTER(fd fd_nvidia_uvm, cmd const[UVM_MAP_COUNTER], arg ptr[inout, UVM_MAP_COUNTER_PARAMS])
ioctl$UVM_CREATE_EVENT_QUEUE(fd fd_nvidia_uvm, cmd const[UVM_CREATE_EVENT_QUEUE], arg ptr[inout, UVM_CREATE_EVENT_QUEUE_PARAMS])
ioctl$UVM_REMOVE_EVENT_QUEUE(fd fd_nvidia_uvm, cmd const[UVM_REMOVE_EVENT_QUEUE], arg ptr[inout, UVM_REMOVE_EVENT_QUEUE_PARAMS])
ioctl$UVM_MAP_EVENT_QUEUE(fd fd_nvidia_uvm, cmd const[UVM_MAP_EVENT_QUEUE], arg ptr[inout, UVM_MAP_EVENT_QUEUE_PARAMS])
ioctl$UVM_EVENT_CTRL(fd fd_nvidia_uvm, cmd const[UVM_EVENT_CTRL], arg ptr[inout, UVM_EVENT_CTRL_PARAMS])
ioctl$UVM_REGISTER_MPS_SERVER(fd fd_nvidia_uvm, cmd const[UVM_REGISTER_MPS_SERVER], arg ptr[inout, UVM_REGISTER_MPS_SERVER_PARAMS])
ioctl$UVM_REGISTER_MPS_CLIENT(fd fd_nvidia_uvm, cmd const[UVM_REGISTER_MPS_CLIENT], arg ptr[inout, UVM_REGISTER_MPS_CLIENT_PARAMS])
ioctl$UVM_GET_GPU_UUID_TABLE(fd fd_nvidia_uvm, cmd const[UVM_GET_GPU_UUID_TABLE], arg ptr[out, UVM_GET_GPU_UUID_TABLE_PARAMS])
ioctl$UVM_REGION_SET_BACKING(fd fd_nvidia_uvm, cmd const[UVM_REGION_SET_BACKING], arg ptr[inout, UVM_REGION_SET_BACKING_PARAMS])
ioctl$UVM_REGION_UNSET_BACKING(fd fd_nvidia_uvm, cmd const[UVM_REGION_UNSET_BACKING], arg ptr[inout, UVM_REGION_UNSET_BACKING_PARAMS])
ioctl$UVM_CREATE_RANGE_GROUP(fd fd_nvidia_uvm, cmd const[UVM_CREATE_RANGE_GROUP], arg ptr[out, UVM_CREATE_RANGE_GROUP_PARAMS])
ioctl$UVM_DESTROY_RANGE_GROUP(fd fd_nvidia_uvm, cmd const[UVM_DESTROY_RANGE_GROUP], arg ptr[inout, UVM_DESTROY_RANGE_GROUP_PARAMS])
ioctl$UVM_REGISTER_GPU_VASPACE(fd fd_nvidia_uvm, cmd const[UVM_REGISTER_GPU_VASPACE], arg ptr[inout, UVM_REGISTER_GPU_VASPACE_PARAMS])
ioctl$UVM_UNREGISTER_GPU_VASPACE(fd fd_nvidia_uvm, cmd const[UVM_UNREGISTER_GPU_VASPACE], arg ptr[inout, UVM_UNREGISTER_GPU_VASPACE_PARAMS])
ioctl$UVM_REGISTER_CHANNEL(fd fd_nvidia_uvm, cmd const[UVM_REGISTER_CHANNEL], arg ptr[inout, UVM_REGISTER_CHANNEL_PARAMS])
ioctl$UVM_UNREGISTER_CHANNEL(fd fd_nvidia_uvm, cmd const[UVM_UNREGISTER_CHANNEL], arg ptr[inout, UVM_UNREGISTER_CHANNEL_PARAMS])
ioctl$UVM_ENABLE_PEER_ACCESS(fd fd_nvidia_uvm, cmd const[UVM_ENABLE_PEER_ACCESS], arg ptr[inout, UVM_ENABLE_PEER_ACCESS_PARAMS])
ioctl$UVM_DISABLE_PEER_ACCESS(fd fd_nvidia_uvm, cmd const[UVM_DISABLE_PEER_ACCESS], arg ptr[inout, UVM_DISABLE_PEER_ACCESS_PARAMS])
ioctl$UVM_SET_RANGE_GROUP(fd fd_nvidia_uvm, cmd const[UVM_SET_RANGE_GROUP], arg ptr[inout, UVM_SET_RANGE_GROUP_PARAMS])
ioctl$UVM_MAP_EXTERNAL_ALLOCATION(fd fd_nvidia_uvm, cmd const[UVM_MAP_EXTERNAL_ALLOCATION], arg ptr[inout, UVM_MAP_EXTERNAL_ALLOCATION_PARAMS])
ioctl$UVM_FREE(fd fd_nvidia_uvm, cmd const[UVM_FREE], arg ptr[inout, UVM_FREE_PARAMS])
ioctl$UVM_MEM_MAP(fd fd_nvidia_uvm, cmd const[UVM_MEM_MAP], arg ptr[inout, UVM_MEM_MAP_PARAMS])
ioctl$UVM_DEBUG_ACCESS_MEMORY(fd fd_nvidia_uvm, cmd const[UVM_DEBUG_ACCESS_MEMORY], arg ptr[inout, UVM_DEBUG_ACCESS_MEMORY_PARAMS])
ioctl$UVM_REGISTER_GPU(fd fd_nvidia_uvm, cmd const[UVM_REGISTER_GPU], arg ptr[inout, UVM_REGISTER_GPU_PARAMS])
ioctl$UVM_UNREGISTER_GPU(fd fd_nvidia_uvm, cmd const[UVM_UNREGISTER_GPU], arg ptr[inout, UVM_UNREGISTER_GPU_PARAMS])
ioctl$UVM_PAGEABLE_MEM_ACCESS(fd fd_nvidia_uvm, cmd const[UVM_PAGEABLE_MEM_ACCESS], arg ptr[out, UVM_PAGEABLE_MEM_ACCESS_PARAMS])
ioctl$UVM_PREVENT_MIGRATION_RANGE_GROUPS(fd fd_nvidia_uvm, cmd const[UVM_PREVENT_MIGRATION_RANGE_GROUPS], arg ptr[inout, UVM_PREVENT_MIGRATION_RANGE_GROUPS_PARAMS])
ioctl$UVM_ALLOW_MIGRATION_RANGE_GROUPS(fd fd_nvidia_uvm, cmd const[UVM_ALLOW_MIGRATION_RANGE_GROUPS], arg ptr[inout, UVM_ALLOW_MIGRATION_RANGE_GROUPS_PARAMS])
ioctl$UVM_SET_PREFERRED_LOCATION(fd fd_nvidia_uvm, cmd const[UVM_SET_PREFERRED_LOCATION], arg ptr[inout, UVM_SET_PREFERRED_LOCATION_PARAMS])
ioctl$UVM_UNSET_PREFERRED_LOCATION(fd fd_nvidia_uvm, cmd const[UVM_UNSET_PREFERRED_LOCATION], arg ptr[inout, UVM_UNSET_PREFERRED_LOCATION_PARAMS])
ioctl$UVM_ENABLE_READ_DUPLICATION(fd fd_nvidia_uvm, cmd const[UVM_ENABLE_READ_DUPLICATION], arg ptr[inout, UVM_ENABLE_READ_DUPLICATION_PARAMS])
ioctl$UVM_DISABLE_READ_DUPLICATION(fd fd_nvidia_uvm, cmd const[UVM_DISABLE_READ_DUPLICATION], arg ptr[inout, UVM_DISABLE_READ_DUPLICATION_PARAMS])
ioctl$UVM_SET_ACCESSED_BY(fd fd_nvidia_uvm, cmd const[UVM_SET_ACCESSED_BY], arg ptr[inout, UVM_SET_ACCESSED_BY_PARAMS])
ioctl$UVM_UNSET_ACCESSED_BY(fd fd_nvidia_uvm, cmd const[UVM_UNSET_ACCESSED_BY], arg ptr[inout, UVM_UNSET_ACCESSED_BY_PARAMS])
ioctl$UVM_MIGRATE(fd fd_nvidia_uvm, cmd const[UVM_MIGRATE], arg ptr[inout, UVM_MIGRATE_PARAMS])
ioctl$UVM_MIGRATE_RANGE_GROUP(fd fd_nvidia_uvm, cmd const[UVM_MIGRATE_RANGE_GROUP], arg ptr[inout, UVM_MIGRATE_RANGE_GROUP_PARAMS])
ioctl$UVM_ENABLE_SYSTEM_WIDE_ATOMICS(fd fd_nvidia_uvm, cmd const[UVM_ENABLE_SYSTEM_WIDE_ATOMICS], arg ptr[inout, UVM_ENABLE_SYSTEM_WIDE_ATOMICS_PARAMS])
ioctl$UVM_DISABLE_SYSTEM_WIDE_ATOMICS(fd fd_nvidia_uvm, cmd const[UVM_DISABLE_SYSTEM_WIDE_ATOMICS], arg ptr[inout, UVM_DISABLE_SYSTEM_WIDE_ATOMICS_PARAMS])
ioctl$UVM_TOOLS_INIT_EVENT_TRACKER(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_INIT_EVENT_TRACKER], arg ptr[inout, UVM_TOOLS_INIT_EVENT_TRACKER_PARAMS])
ioctl$UVM_TOOLS_SET_NOTIFICATION_THRESHOLD(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_SET_NOTIFICATION_THRESHOLD], arg ptr[inout, UVM_TOOLS_SET_NOTIFICATION_THRESHOLD_PARAMS])
ioctl$UVM_TOOLS_EVENT_QUEUE_ENABLE_EVENTS(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_EVENT_QUEUE_ENABLE_EVENTS], arg ptr[inout, UVM_TOOLS_EVENT_QUEUE_ENABLE_EVENTS_PARAMS])
ioctl$UVM_TOOLS_EVENT_QUEUE_DISABLE_EVENTS(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_EVENT_QUEUE_DISABLE_EVENTS], arg ptr[inout, UVM_TOOLS_EVENT_QUEUE_DISABLE_EVENTS_PARAMS])
ioctl$UVM_TOOLS_ENABLE_COUNTERS(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_ENABLE_COUNTERS], arg ptr[inout, UVM_TOOLS_ENABLE_COUNTERS_PARAMS])
ioctl$UVM_TOOLS_DISABLE_COUNTERS(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_DISABLE_COUNTERS], arg ptr[inout, UVM_TOOLS_DISABLE_COUNTERS_PARAMS])
ioctl$UVM_TOOLS_READ_PROCESS_MEMORY(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_READ_PROCESS_MEMORY], arg ptr[inout, UVM_TOOLS_READ_PROCESS_MEMORY_PARAMS])
ioctl$UVM_TOOLS_WRITE_PROCESS_MEMORY(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_WRITE_PROCESS_MEMORY], arg ptr[inout, UVM_TOOLS_WRITE_PROCESS_MEMORY_PARAMS])
ioctl$UVM_TOOLS_GET_PROCESSOR_UUID_TABLE(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_GET_PROCESSOR_UUID_TABLE], arg ptr[inout, UVM_TOOLS_GET_PROCESSOR_UUID_TABLE_PARAMS])
ioctl$UVM_MAP_DYNAMIC_PARALLELISM_REGION(fd fd_nvidia_uvm, cmd const[UVM_MAP_DYNAMIC_PARALLELISM_REGION], arg ptr[inout, UVM_MAP_DYNAMIC_PARALLELISM_REGION_PARAMS])
ioctl$UVM_UNMAP_EXTERNAL_ALLOCATION(fd fd_nvidia_uvm, cmd const[UVM_UNMAP_EXTERNAL_ALLOCATION], arg ptr[inout, UVM_UNMAP_EXTERNAL_ALLOCATION_PARAMS])
ioctl$UVM_TOOLS_FLUSH_EVENTS(fd fd_nvidia_uvm_tools, cmd const[UVM_TOOLS_FLUSH_EVENTS], arg ptr[out, UVM_TOOLS_FLUSH_EVENTS_PARAMS])
ioctl$UVM_ALLOC_SEMAPHORE_POOL(fd fd_nvidia_uvm, cmd const[UVM_ALLOC_SEMAPHORE_POOL], arg ptr[inout, UVM_ALLOC_SEMAPHORE_POOL_PARAMS])
ioctl$UVM_CLEAN_UP_ZOMBIE_RESOURCES(fd fd_nvidia_uvm, cmd const[UVM_CLEAN_UP_ZOMBIE_RESOURCES], arg ptr[out, UVM_CLEAN_UP_ZOMBIE_RESOURCES_PARAMS])
ioctl$UVM_PAGEABLE_MEM_ACCESS_ON_GPU(fd fd_nvidia_uvm, cmd const[UVM_PAGEABLE_MEM_ACCESS_ON_GPU], arg ptr[inout, UVM_PAGEABLE_MEM_ACCESS_ON_GPU_PARAMS])
ioctl$UVM_POPULATE_PAGEABLE(fd fd_nvidia_uvm, cmd const[UVM_POPULATE_PAGEABLE], arg ptr[inout, UVM_POPULATE_PAGEABLE_PARAMS])
ioctl$UVM_VALIDATE_VA_RANGE(fd fd_nvidia_uvm, cmd const[UVM_VALIDATE_VA_RANGE], arg ptr[inout, UVM_VALIDATE_VA_RANGE_PARAMS])
ioctl$UVM_IS_8_SUPPORTED(fd fd_nvidia_uvm, cmd const[UVM_IS_8_SUPPORTED], arg ptr[inout, UVM_IS_8_SUPPORTED_PARAMS])

type NV_STATUS int32
type UvmStream int64
type NvProcessorUuid NvUuid

NvUuid {
	uuid	array[int8, NV_UUID_LEN]
}

UvmGpuMappingAttributes {
	gpuUuid		NvProcessorUuid
	gpuMappingType	int32
	gpuCachingType	int32
	gpuFormatType	int32
	gpuElementBits	int32
}

UVM_INITIALIZE_PARAMS {
	flags int64 (in)
	rmStatus NV_STATUS (out)
}

UVM_RESERVE_VA_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_RELEASE_VA_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_REGION_COMMIT_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	streamId	UvmStream	(in)
	gpuUuid		NvUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_REGION_DECOMMIT_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_REGION_SET_STREAM_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	newStreamId	UvmStream	(in)
	gpuUuid		NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_SET_STREAM_RUNNING_PARAMS {
	streamId	UvmStream	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_SET_STREAM_STOPPED_PARAMS {
	streamIdArray	array[UvmStream, UVM_MAX_STREAMS_PER_IOCTL_CALL]	(in)
	nStreams	int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_RUN_TEST_PARAMS {
	gpuUuid		NvProcessorUuid	(in)
	test		int32	(in)
# struct multiGpu
	peerGpuUuid	NvProcessorUuid	(in)
	peerId		int32	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_ADD_SESSION_PARAMS {
	pidTarget		int32	(in)
# TODO ptr64 to something
	countersBaseAddress	int64	(in)
	sessionIndex		int32	(out)
	rmStatus		NV_STATUS	(out)
}

UVM_REMOVE_SESSION_PARAMS {
	sessionIndex	int32	(in)
	rmStatus	NV_STATUS	(out)
}

UvmCounterConfig {
	scope	int32
	name	int32
	gpuid	NvProcessorUuid
	state	int32
}

UVM_ENABLE_COUNTERS_PARAMS {
	sessionIndex	int32	(in)
	config		array[UvmCounterConfig, UVM_MAX_COUNTERS_PER_IOCTL_CALL]	(in)
	count		int32	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_MAP_COUNTER_PARAMS {
	sessionIndex	int32	(in)
	scope		int32	(in)
	counterName	int32	(in)
	gpuUuid		NvProcessorUuid	(in)
# TODO ptr64 to something
	addr		buffer[out]
	rmStatus	NV_STATUS	(out)
}

UVM_CREATE_EVENT_QUEUE_PARAMS {
	sessionIndex		int32	(in)
	eventQueueIndex		int32	(out)
	queueSize		int64	(in)
	notificationCount	int64	(in)
	timeStampType		int32	(in)
	rmStatus		NV_STATUS	(out)
}

UVM_REMOVE_EVENT_QUEUE_PARAMS {
	sessionIndex	int32	(in)
	eventQueueIndex	int32	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_MAP_EVENT_QUEUE_PARAMS {
	sessionIndex	int32	(in)
	eventQueueIndex	int32	(in)
# TODO pointers to something
	userRODataAddr	buffer[in]
	userRWDataAddr	buffer[in]
	readIndexAddr	buffer[out]
	writeIndexAddr	buffer[out]
	queueBufferAddr	buffer[out]
	rmStatus	NV_STATUS	(out)
}

UVM_EVENT_CTRL_PARAMS {
	sessionIndex	int32	(in)
	eventQueueIndex	int32	(in)
	eventType	int32	(in)
	enable		int32	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_REGISTER_MPS_SERVER_PARAMS {
	gpuUuidArray	array[NvProcessorUuid, 32]	(in)
	numGpus		int32	(in)
	serverId	int64	(out)
	rmStatus	NV_STATUS	(out)
}

UVM_REGISTER_MPS_CLIENT_PARAMS {
	serverId	int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_GET_GPU_UUID_TABLE_PARAMS {
	gpuUuidArray	array[NvProcessorUuid, 32]	(out)
	validCount	int32	(out)
	rmStatus	NV_STATUS	(out)
}

UVM_REGION_SET_BACKING_PARAMS {
	gpuUuid		NvProcessorUuid	(in)
	hAllocation	int32	(in)
	vaAddr		buffer[in]
	regionLength	bytesize[vaAddr, int64]	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_REGION_UNSET_BACKING_PARAMS {
	vaAddr		buffer[in]
	regionLength	bytesize[vaAddr, int64]	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_CREATE_RANGE_GROUP_PARAMS {
	rangeGroupId	int64	(out)
	rmStatus	NV_STATUS	(out)
}

UVM_DESTROY_RANGE_GROUP_PARAMS {
	rangeGroupId	int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_REGISTER_GPU_VASPACE_PARAMS {
	gpuUuid		NvProcessorUuid	(in)
	rmCtrlFd	fd_nvidiactl	(in)
	hClient		cid	(in)
	hVaSpace	NvHandle	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_UNREGISTER_GPU_VASPACE_PARAMS {
	gpuUuid		NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_REGISTER_CHANNEL_PARAMS {
	gpuUuid		NvProcessorUuid	(in)
	rmCtrlFd	fd_nvidiactl	(in)
	hClient		cid	(in)
	hChannel	NvHandle	(in)
	base		buffer[in]
	length		bytesize[base, int64]
	rmStatus	NV_STATUS	(out)
}

UVM_UNREGISTER_CHANNEL_PARAMS {
	gpuUuid		NvProcessorUuid	(in)
	hClient		cid	(in)
	hChannel	NvHandle	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_ENABLE_PEER_ACCESS_PARAMS {
	gpuUuidA	NvProcessorUuid	(in)
	gpuUuidB	NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_DISABLE_PEER_ACCESS_PARAMS {
	gpuUuidA	NvProcessorUuid	(in)
	gpuUuidB	NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_SET_RANGE_GROUP_PARAMS {
	rangeGroupId	int64	(in)
	requestedBase	int64	(in)
	length		int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_MAP_EXTERNAL_ALLOCATION_PARAMS {
	base			int64	(in)
	length			int64	(in)
	offset			int64	(in)
	perGpuAttributes	array[UvmGpuMappingAttributes, UVM_MAX_GPUS]	(in)
	gpuAttributesCount	int64	(in)
	rmCtrlFd		fd_nvidiactl	(in)
	hClient			cid	(in)
	hMemory			int32	(in)
	hClientFromRm		int32	(in)
	hMemoryFromRm		int32	(in)
	rmStatus		NV_STATUS	(out)
}

UVM_FREE_PARAMS {
	base		int64	(in)
	length		int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_MEM_MAP_PARAMS {
# TODO ptr64 to something
	regionBase	buffer[in]
	regionLength	bytesize[regionBase, int64]
	rmStatus	NV_STATUS	(out)
}

UVM_DEBUG_ACCESS_MEMORY_PARAMS {
	sessionIndex	int32	(in)
	baseAddress	int64	(in)
	sizeInBytes	int64	(in)
	accessType	int32	(in)
	buffer		buffer[inout]
	isBitmaskSet	bool8	(out)
	bitmask		int64	(inout)
	rmStatus	NV_STATUS	(out)
}

UVM_REGISTER_GPU_PARAMS {
	gpu_uuid	NvProcessorUuid	(in)
	numaEnabled	bool8	(out)
	numaNodeId	int32	(out)
	rmCtrlFd	fd_nvidiactl	(in)
	hClient		cid	(in)
	hObject		NvHandle	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_UNREGISTER_GPU_PARAMS {
	gpu_uuid	NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_PAGEABLE_MEM_ACCESS_PARAMS {
	pageableMemAccess	bool8	(out)
	rmStatus		NV_STATUS	(out)
}

UVM_PREVENT_MIGRATION_RANGE_GROUPS_PARAMS {
	rangeGroupIds	array[int64, UVM_MAX_RANGE_GROUPS_PER_IOCTL_CALL]	(in)
	numGroupIds	int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_ALLOW_MIGRATION_RANGE_GROUPS_PARAMS {
	rangeGroupIds	array[int64, UVM_MAX_RANGE_GROUPS_PER_IOCTL_CALL]	(in)
	numGroupIds	int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_SET_PREFERRED_LOCATION_PARAMS {
	requestedBase		int64	(in)
	length			int64	(in)
	preferredLocation	NvProcessorUuid	(in)
	rmStatus		NV_STATUS	(out)
}

UVM_UNSET_PREFERRED_LOCATION_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_ENABLE_READ_DUPLICATION_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_DISABLE_READ_DUPLICATION_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_SET_ACCESSED_BY_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	accessedByUuid	NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_UNSET_ACCESSED_BY_PARAMS {
	requestedBase	int64	(in)
	length		int64	(in)
	accessedByUuid	NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_MIGRATE_PARAMS {
	base			int64	(in)
	length			int64	(in)
	destinationUuid		NvProcessorUuid	(in)
	flags			int32	(in)
	semaphoreAddress	int64	(in)
	semaphorePayload	int64	(in)
	cpuNumaNode		int32	(in)
	userSpaceStart		buffer[out]
	userSpaceLength		bytesize[userSpaceStart, int64]	(out)
	rmStatus		NV_STATUS	(out)
}

UVM_MIGRATE_RANGE_GROUP_PARAMS {
	rangeGroupId	int64	(in)
	destinationUuid	NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_ENABLE_SYSTEM_WIDE_ATOMICS_PARAMS {
	gpu_uuid	NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_DISABLE_SYSTEM_WIDE_ATOMICS_PARAMS {
	gpu_uuid	NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UvmToolsEventControlData {
	get_ahead	int32
	get_behind	int32
	put_ahead	int32
	put_behind	int32
	dropped		array[int64, 64]
}

UVM_TOOLS_INIT_EVENT_TRACKER_PARAMS {
	queueBuffer	ptr[in, array[UvmEventEntry]]
	queueBufferSize	len[queueBuffer, int64]	(in)
	controlBuffer	ptr64[in, UvmToolsEventControlData]
	processor	NvProcessorUuid	(in)
	allProcessors	int32	(in)
	uvmFd		fd_nvidia_uvm	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_TOOLS_SET_NOTIFICATION_THRESHOLD_PARAMS {
	notificationThreshold	int32	(in)
	rmStatus		NV_STATUS	(out)
}

UVM_TOOLS_EVENT_QUEUE_ENABLE_EVENTS_PARAMS {
	eventTypeFlags	int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_TOOLS_EVENT_QUEUE_DISABLE_EVENTS_PARAMS {
	eventTypeFlags	int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_TOOLS_ENABLE_COUNTERS_PARAMS {
	counterTypeFlags	int64	(in)
	rmStatus		NV_STATUS	(out)
}

UVM_TOOLS_DISABLE_COUNTERS_PARAMS {
	counterTypeFlags	int64	(in)
	rmStatus		NV_STATUS	(out)
}

UVM_TOOLS_READ_PROCESS_MEMORY_PARAMS {
	buffer		buffer[in]
	size		bytesize[buffer, int64]	(in)
	targetVa	buffer[in]
	bytesRead	int64	(out)
	rmStatus	NV_STATUS	(out)
}

UVM_TOOLS_WRITE_PROCESS_MEMORY_PARAMS {
	buffer		buffer[in]
	size		bytesize[buffer, int64]	(in)
	targetVa	buffer[in]
	bytesWritten	int64	(out)
	rmStatus	NV_STATUS	(out)
}

UVM_TOOLS_GET_PROCESSOR_UUID_TABLE_PARAMS {
	tablePtr	ptr64[out, array[NvProcessorUuid]]	(in)
	count		len[tablePtr, int32]	(inout)
	rmStatus	NV_STATUS	(out)
}

UVM_MAP_DYNAMIC_PARALLELISM_REGION_PARAMS {
	base		int64	(in)
	length		int64	(in)
	gpuUuid		NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_UNMAP_EXTERNAL_ALLOCATION_PARAMS {
	base		int64	(in)
	gpuUuid		NvProcessorUuid	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_TOOLS_FLUSH_EVENTS_PARAMS {
	rmStatus	NV_STATUS	(out)
}

UVM_ALLOC_SEMAPHORE_POOL_PARAMS {
	base			int64	(in)
	length			int64	(in)
	perGpuAttributes	array[UvmGpuMappingAttributes, UVM_MAX_GPUS]	(in)
	gpuAttributesCount	int64	(in)
	rmStatus		NV_STATUS	(out)
}

UVM_CLEAN_UP_ZOMBIE_RESOURCES_PARAMS {
	rmStatus	NV_STATUS	(out)
}

UVM_PAGEABLE_MEM_ACCESS_ON_GPU_PARAMS {
	gpu_uuid		NvProcessorUuid	(in)
	pageableMemAccess	bool8	(out)
	rmStatus		NV_STATUS	(out)
}

UVM_POPULATE_PAGEABLE_PARAMS {
	base		int64	(in)
	length		int64	(in)
	flags		int32	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_VALIDATE_VA_RANGE_PARAMS {
	base		int64	(in)
	length		int64	(in)
	rmStatus	NV_STATUS	(out)
}

UVM_IS_8_SUPPORTED_PARAMS {
	is8Supported	int32	(out)
	rmStatus	NV_STATUS	(out)
}

UvmEventMigrationInfo_Lite {
	eventType int8
	direction int8
	srcIndex int8
	dstIndex int8
	padding32Bits int32
	address int64
	migratedBytes int64
	beginTimeStamp int64
	endTimeStamp int64
	streamId int64
}

UvmEventCpuFaultInfo {
	eventType int8
	accessType int8
	padding16Bits int16
	padding32Bits int32
	address int64
	timeStamp int64
	pid int32
	threadId int32
	pc int64
}

UvmEventMigrationInfo {
	eventType int8
	migrationCause int8
	srcIndex int8
	dstIndex int8
	padding32Bits int32
	address int64
	migratedBytes int64
	beginTimeStamp int64
	endTimeStamp int64
	rangeGroupId int64
	beginTimeStampGpu int64
	endTimeStampGpu int64
}

UvmEventGpuFaultInfo {
	eventType int8
	faultType int8
	accessType int8
	gpuIndex int8
	#union [
	gpcId int16
	channelId int16
	#]
	clientId int16
	address int64
	timeStamp int64
	timeStampGpu int64
	batchId int32
	clientType int8
	padding8Bits int8
	padding16Bits int16
}

UvmEventGpuFaultReplayInfo {
	eventType int8
	gpuIndex int8
	clientType int8
	padding8bits int8
	batchId int32
	timeStamp int64
	timeStampGpu int64
}

UvmEventFatalFaultInfo {
	eventType int8
	faultType int8
	accessType int8
	processorIndex int8
	reason int8
	padding8bits int8
	padding16bits int16
	address int64
	timeStamp int64
}

UvmEventReadDuplicateInfo {
	eventType int8
	padding8bits int8
	padding16bits int16
	padding32bits int32
	processors int64
	address int64
	size int64
	timeStamp int64
}

UvmEventReadDuplicateInvalidateInfo {
	eventType int8
	residentIndex int8
	padding16bits int16
	padding32bits int32
	address int64
	size int64
	timeStamp int64
}

UvmEventPageSizeChangeInfo {
	eventType int8
	processorIndex int8
	padding16bits int16
	size int32
	address int64
	timeStamp int64
}

UvmEventThrashingDetectedInfo {
	eventType int8
	padding8bits int8
	padding16bits int16
	padding32bits int32
	processors int64
	address int64
	size int64
	timeStamp int64
}

UvmEventThrottlingStartInfo {
	eventType int8
	processorIndex int8
	padding16bits int16
	padding32bits int32
	address int64
	timeStamp int64
}

UvmEventThrottlingEndInfo {
	eventType int8
	processorIndex int8
	padding16bits int16
	padding32bits int32
	address int64
	timeStamp int64
}

UvmEventMapRemoteInfo {
	eventType int8
	srcIndex int8
	dstIndex int8
	mapRemoteCause int8
	padding32bits int32
	address int64
	size int64
	timeStamp int64
	timeStampGpu int64
}

UvmEventEvictionInfo {
	eventType int8
	srcIndex int8
	dstIndex int8
	padding8bits int8
	padding32bits int32
	addressOut int64
	addressIn int64
	size int64
	timeStamp int64
}

UvmEventTestAccessCounterInfo {
	eventType int8
	srcIndex int8
	aperture int8
	instancePtrAperture int8
	isVirtual int8
	isFromCpu int8
	veId int8
	onManaged int8
	value int32
	subGranularity int32
	tag int32
	bank int32
	address int64
	instancePtr int64
}

UvmEventEntry {
	eventType int8
	migration_Lite UvmEventMigrationInfo_Lite
	cpuFault UvmEventCpuFaultInfo
	migration UvmEventMigrationInfo
	gpuFault UvmEventGpuFaultInfo
	gpuFaultReplay UvmEventGpuFaultReplayInfo
	fatalFault UvmEventFatalFaultInfo
	readDuplicate UvmEventReadDuplicateInfo
	readDuplicateInvalidate UvmEventReadDuplicateInvalidateInfo
	pageSizeChange UvmEventPageSizeChangeInfo
	thrashing UvmEventThrashingDetectedInfo
	throttlingStart UvmEventThrottlingStartInfo
	throttlingEnd UvmEventThrottlingEndInfo
	mapRemote UvmEventMapRemoteInfo
	eviction UvmEventEvictionInfo
	eventTypeFoo int8
	accessCounter UvmEventTestAccessCounterInfo
}
